name: '[Subflow] Deploy'
on:
  workflow_call:
    inputs:
      ENV:
        required: true
        type: string
      PACKAGE_ID:
        required: true
        type: string
      TAG:
        required: true
        type: string
      POST_TO_SLACK:
        type: boolean
    outputs:
      successfullyInstalled:
        description: 'Successful install'
        value: ${{ jobs.deploy.outputs.successfullyInstalled }}
      installOutput:
        description: 'Install output log'
        value: ${{ jobs.deploy.outputs.installOutput }}
jobs:

  # -------------------------------------------------------------------------- #
  #                                   Deploy                                   #
  # -------------------------------------------------------------------------- #

  deploy:
    name: deploy
    permissions:
      contents: read
      id-token: write
    environment:
      name: ${{ inputs.ENV }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install & Authorize sf cli
      - name: Install & Authorize sf cli (${{ inputs.ENV }})
        uses: sopra-steria-salesforce/sf-cli-setup@v0.8
        with:
          sf-cli-version: 2.34.7
          username: ${{ vars.SF_PREPROD_USERNAME }}
          client-id: ${{ secrets.SF_PREPROD_CLIENT_ID }}
          private-key: ${{ secrets.SF_PREPROD_PRIVATE_KEY }}
          set-default-org: true

      # TODO: Deploy Picklist
      # - name: Deploy Picklist Values
      #   run: deploy stuff

      # Install package in target org
      - name: Install package in target org
        id: deployment
        run: sf package:install --package ${{ inputs.PACKAGE_ID }} --installation-key ${{ secrets.SF_PACKAGE_KEY }} --wait 20 --publish-wait 20 --no-prompt --json | tee output

      # Check for Warnings
      - name: Check for Warnings
        run: |
          cat output | jq -c -r '.warnings[]' | while read -r warning; do
            echo "::warning::$warning"
          done

      # Check for Errors
      - name: Check for Errors
        id: check-error
        run: |
          if [ $(cat output | jq '.status') != "0" ]; then

            echo "::error::❌ PACKAGE INSTALLATION FAILED"
            echo "successfullyInstalled=false" >> $GITHUB_OUTPUT

            #* log to github action output
            cat output | jq -c -r '.result.Error | .[]?' | while read -r error; do
              echo "::error::$error"
            done
            cat output | jq -c -r '.message' | while read -r error; do
              if [ "$error" != "null" ]; then
                echo "::error::$error"
              fi
            done  

            #* output for slack
            errorOutput=$(cat output | jq -r '.message')
            errorOutput="${errorOutput//$'\n'/'\\n'}"
            echo -e "installOutput=$errorOutput" >> $GITHUB_OUTPUT
            
            #* cause an error in github, while saving the output
            exit 125
          fi
          echo "successfullyInstalled=true" >> $GITHUB_OUTPUT

      # Load .env file
      - name: Load .env file
        uses: xom9ikk/dotenv@v2.3.0
        with:
          path: ./env
          mode: ${{ inputs.ENV }}
          load-mode: skip

      # Deploy unpackagable content
      - name: Deploy unpackagable content
        run: |
          if [ -d "./force-app/unpackagable-with-auto-deploy" ]; then
            echo "Starting deployment of ./force-app/unpackagable-with-auto-deploy"
            sf project:deploy:start --ignore-conflicts --source-dir ./force-app/unpackagable-with-auto-deploy --test-level RunLocalTests
          fi

    outputs:
      successfullyInstalled: ${{ steps.check-error.outputs.successfullyInstalled }}
      installOutput: ${{ steps.check-error.outputs.installOutput }}
